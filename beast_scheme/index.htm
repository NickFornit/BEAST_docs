<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Пульт и Beast</title>
  <link rel="stylesheet" href="sys/common.css">
</head>
<body style="margin-left:20px;font-family:arial;font-size:14px;width:1000px;">
<div style="position:relative;height:20px;margin-bottom:20px;">
<h1 style='position:absolute;top:-10px;left:50%;transform: translate(-50%, 0);font-size:18px;'>Пульт связи и схема Beast</h1>
</div>


Пульт связи с Beast выполнен как сайт на PHP с исполняемым файлом golang, который является продуктом компиляции схемы Beast:
<li><a href="pult.htm">Пульт связи с Beast</a></li>
<li><a href="beast.htm">Схема Beast</a></li>
<br>
<b>Краткое описание:</b><br>
Пульт и Beast являются неразрывно связанной системой взаимодействий.<br>
Их работа синхронизируется общим Пульсом – тактовым генератором с частотой 1 секунду (но в случае, если в течении секунды не успеют выполниться запущенные функции схемы Beast, время такта увеличивается).<br>
На главной странице Пульта находятся органы управления, контроля и общения с Beast.<br>
На вспомогательных страницах Пульта находятся редакторы параметров организма Beast, редакторы для отдельных стадий развития и задатчик текущей стадии развития. <br>
Пульт используется для формирования и воспитания адаптивных навыков Beast путем общения с заданием позитивных или негативных стимулов.<br>
Пульт обеспечивает индикацию состояния Beast и отдельных функций.<br>
На Пульте есть инструменты работы с Памятью Beast и подскзка "Как использовать Пульт".<br>
<br>
Схема Beast написана на языке golang (хотя лучшим языком является rust, пока не имеющей удобный IDE от JetBrains). В ходе разработки пришлось отказаться от многопоточности golang из-за досадной недоделки: паники “одновременного чтения и записи в карту”, чего нет в нормальных языках. <br>Декларировалось, что golang был создан как ученический язык с жесткими наставническими правилами, которые здорово раздражают, но с которыми можно мириться, но такие недоделки как паника при работе с картами и отсутствие возможности повторного включения пакетов очень сильно ограничивают возможности. Так что вместо многопоточности пришлось ввести искусственную многопоточность в виде тактов “пульса” частотой в 1 сек (чтобы почти всегда успевали выполняться даже тяжелые функции). Так что в схеме все работает последовательно, но в целом возникает одновременность выполнения различных функций.<br>
Итак, активность всего функционала Beast синхронизирована Пульсом и от него начинается. В момент включения Beast с Пульта этим же Пульсом синхронизируется и работа Пульта.<br>
Особенность функционала – последовательное выполнение сначала более эволюционно древних наработок (как и в мозге), а более поздние используют данные от предыдущих (предыдущие становятся сенсорами последующих), но своей активностью, если она есть, последующие подавляют предыдущие. Так, самыми древними является система равновесия жизненных параметров (гомеостаз) и первичные сенсоры, распознающие активность с Пульта в виде образов восприятия.<br> 
Далее идут безусловные, за ними – условные рефлексы.<br> 
В случае новой сенсорики срабатывает “ориентировочный рефлекс”. Начинают формироваться зеркальные автоматизмы (перенимающие авторитарные действия с Пульта – как свое в данных условиях), а также автоматизмы пробных действий.<br>
Затем формируются образы более сложных состояний, образы “правил” и “значимостей” объектов внимания с возможностью подвергнуть сомнению и заменить (если нужно) базовые автоматизмы.
Далее формируется система ментальных (для целей внутреннего управления, а не выдачи действий на Пульт) действий и образов.<br>
С обилием возникающих данных как результатов функций предшествующих структур, возникает возможность очень разнообразной обработки такой информации с пользой не только для гомеостаза, но поставленных ментально целей.<br>
Схема Beast, таким образом, - это очень сложная в понимании система, требующая предварительного глубокого вникания в модель индивидуальной адаптивности. В случае хорошего понимания сути иерархии адаптивных механизмов, код вполне легко читается потому как минимально использует конструкции языка golang (не использованы даже базы данных), не требуя быть в нем матерым специалистом.<br>
<br>
В схеме везде используется понятие “образ”, соответствующий профилю активности персептронных структур распознающего нейрона. Активность нейрона означает, что на его входы подано то сочетание активностей, на распознавание которого он настроен, т.е. активность одного нейрона символизирует активности многих предшествующих структур и заменяется всего одним сигналом, который в схеме обозначается уникальным идентификатором (ID) в виде числа. Образы позволяют оперировать массивами любой сложности, условно закодированными в единственным ID. Как следствие такой организации, становится возможным использовать фиксированное число слоев распознавания (в новой коре человека 6 фиксированных слоев).<br>

<br>

<b>Последовательность работы кода Beast</b><br>

После общей инициализации первой
вступает пакет <a href="package/gomeostas.htm">gomeostas</a>, определяя
текущие жизненные параметры и базовый контекст восприятия-реагирования.<br>

Остальные пакеты срабатывают при активности с Пульта:<br>

пакет&nbsp;<a
href="package/action_sensor.htm" >action_sensor</a>&nbsp;- детектор действий с Пульта<br>

пакет&nbsp;<a
href="package/word_sensor.htm" >word_sensor</a>&nbsp;- детектор символов, слов и фраз<br>

пакет&nbsp;<a
href="package/reflexes.htm" >reflexes</a>&nbsp;- безусловные и условные рефлексы <br>

и Пакет&nbsp;<a
href="package/psychic.htm" >psychic</a>&nbsp;- автоматизмы, Правила, Значимости, циклы осмысления.
Здесь – самое интересное потому как модели на этом уровне практически никак
никем не описаны в академической науке.<br>

Распознавание условий запуска
автоматизмов (<a href="package/automatism_tree.htm">automatism_tree</a>) – это самое понятное, но назначение и функциональность
ориентировочного рефлекса уже описана очень расплывчато (несмотря на обилие
работ, начиная с Е.Соколова).<br>

Следом за деревом автоматизмов всегда
активируется дерево понимания ситуации (<a
href="package/understanding_tree.htm">understanding_tree</a>) и в каждой последовательности Стимул (действия Оператора)-&gt;
Ответ (действия Beast)-&gt;Эффект (стало хуже или лучше) формируются Правила и
фиксируются значимости активных объектов Стимула. <br>

Далее срабатывает главная функция
произвольности (в <a href="package/understanding.htm">understanding</a>), в которой может быть 4 уровня обработки информации. <br>

Первый реализует возможность
использования готовых автоматизмов с их проверкой на уместность. <br>

Второй уровень срабатывает, если первый
не выдал решения и происходит поиск по Правилам. <br>

В случае, если решения не
окажется, начинается рекурсивный цикл вызова функции произвольности (названной <a
href="funcs/consciousness.htm">consciousness</a>) с
работой ментальных автоматизмов (т.е. обеспечивающих автоматизм мышления).<br>

Циклы событий часто используются
как в программировании: циклы сообщений и в дискретной реализации: машинный
цикл – для обеспечения отзывчивой на события работы. В лобной коре мозга есть
циклы активности, обеспечивающие удержание значимого стимула (fornit.ru/7358). <br>

В случае с Beast
цикл позволяет использовать отдельные
информационные функции, не имеющие аргументов за счет того, что выполнение
предыдущей такой функции оставляет информационный след, который используется последующей
функцией, т.е. основа работа цикла понимания ситуации – в формировании
целостной информационной картины (по Дж.Тонони) и, таким образом отражая
ситуацию (самоощущая происходящее), находить варианты решений, приводящей к
желаемой цели.<br>

<br><br><br><br><br>




